/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RobotController_H
#define RobotController_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "register_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RobotControllerIf {
 public:
  virtual ~RobotControllerIf() {}
  virtual void ping() = 0;
  virtual void registerRobot(const int32_t id, const std::string& name) = 0;
  virtual bool checkRobotHealth(const int32_t id) = 0;
  virtual void electionResult(const int32_t id) = 0;
};

class RobotControllerIfFactory {
 public:
  typedef RobotControllerIf Handler;

  virtual ~RobotControllerIfFactory() {}

  virtual RobotControllerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RobotControllerIf* /* handler */) = 0;
  };

class RobotControllerIfSingletonFactory : virtual public RobotControllerIfFactory {
 public:
  RobotControllerIfSingletonFactory(const ::std::shared_ptr<RobotControllerIf>& iface) : iface_(iface) {}
  virtual ~RobotControllerIfSingletonFactory() {}

  virtual RobotControllerIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(RobotControllerIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<RobotControllerIf> iface_;
};

class RobotControllerNull : virtual public RobotControllerIf {
 public:
  virtual ~RobotControllerNull() {}
  void ping() override {
    return;
  }
  void registerRobot(const int32_t /* id */, const std::string& /* name */) override {
    return;
  }
  bool checkRobotHealth(const int32_t /* id */) override {
    bool _return = false;
    return _return;
  }
  void electionResult(const int32_t /* id */) override {
    return;
  }
};


class RobotController_ping_args {
 public:

  RobotController_ping_args(const RobotController_ping_args&) noexcept;
  RobotController_ping_args& operator=(const RobotController_ping_args&) noexcept;
  RobotController_ping_args() noexcept {
  }

  virtual ~RobotController_ping_args() noexcept;

  bool operator == (const RobotController_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RobotController_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotController_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RobotController_ping_pargs {
 public:


  virtual ~RobotController_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RobotController_ping_result {
 public:

  RobotController_ping_result(const RobotController_ping_result&) noexcept;
  RobotController_ping_result& operator=(const RobotController_ping_result&) noexcept;
  RobotController_ping_result() noexcept {
  }

  virtual ~RobotController_ping_result() noexcept;

  bool operator == (const RobotController_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RobotController_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotController_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RobotController_ping_presult {
 public:


  virtual ~RobotController_ping_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RobotController_registerRobot_args__isset {
  _RobotController_registerRobot_args__isset() : id(false), name(false) {}
  bool id :1;
  bool name :1;
} _RobotController_registerRobot_args__isset;

class RobotController_registerRobot_args {
 public:

  RobotController_registerRobot_args(const RobotController_registerRobot_args&);
  RobotController_registerRobot_args& operator=(const RobotController_registerRobot_args&);
  RobotController_registerRobot_args() noexcept
                                     : id(0),
                                       name() {
  }

  virtual ~RobotController_registerRobot_args() noexcept;
  int32_t id;
  std::string name;

  _RobotController_registerRobot_args__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  bool operator == (const RobotController_registerRobot_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const RobotController_registerRobot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotController_registerRobot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RobotController_registerRobot_pargs {
 public:


  virtual ~RobotController_registerRobot_pargs() noexcept;
  const int32_t* id;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RobotController_registerRobot_result {
 public:

  RobotController_registerRobot_result(const RobotController_registerRobot_result&) noexcept;
  RobotController_registerRobot_result& operator=(const RobotController_registerRobot_result&) noexcept;
  RobotController_registerRobot_result() noexcept {
  }

  virtual ~RobotController_registerRobot_result() noexcept;

  bool operator == (const RobotController_registerRobot_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RobotController_registerRobot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotController_registerRobot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RobotController_registerRobot_presult {
 public:


  virtual ~RobotController_registerRobot_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RobotController_checkRobotHealth_args__isset {
  _RobotController_checkRobotHealth_args__isset() : id(false) {}
  bool id :1;
} _RobotController_checkRobotHealth_args__isset;

class RobotController_checkRobotHealth_args {
 public:

  RobotController_checkRobotHealth_args(const RobotController_checkRobotHealth_args&) noexcept;
  RobotController_checkRobotHealth_args& operator=(const RobotController_checkRobotHealth_args&) noexcept;
  RobotController_checkRobotHealth_args() noexcept
                                        : id(0) {
  }

  virtual ~RobotController_checkRobotHealth_args() noexcept;
  int32_t id;

  _RobotController_checkRobotHealth_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const RobotController_checkRobotHealth_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const RobotController_checkRobotHealth_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotController_checkRobotHealth_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RobotController_checkRobotHealth_pargs {
 public:


  virtual ~RobotController_checkRobotHealth_pargs() noexcept;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RobotController_checkRobotHealth_result__isset {
  _RobotController_checkRobotHealth_result__isset() : success(false) {}
  bool success :1;
} _RobotController_checkRobotHealth_result__isset;

class RobotController_checkRobotHealth_result {
 public:

  RobotController_checkRobotHealth_result(const RobotController_checkRobotHealth_result&) noexcept;
  RobotController_checkRobotHealth_result& operator=(const RobotController_checkRobotHealth_result&) noexcept;
  RobotController_checkRobotHealth_result() noexcept
                                          : success(0) {
  }

  virtual ~RobotController_checkRobotHealth_result() noexcept;
  bool success;

  _RobotController_checkRobotHealth_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RobotController_checkRobotHealth_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RobotController_checkRobotHealth_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotController_checkRobotHealth_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RobotController_checkRobotHealth_presult__isset {
  _RobotController_checkRobotHealth_presult__isset() : success(false) {}
  bool success :1;
} _RobotController_checkRobotHealth_presult__isset;

class RobotController_checkRobotHealth_presult {
 public:


  virtual ~RobotController_checkRobotHealth_presult() noexcept;
  bool* success;

  _RobotController_checkRobotHealth_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RobotController_electionResult_args__isset {
  _RobotController_electionResult_args__isset() : id(false) {}
  bool id :1;
} _RobotController_electionResult_args__isset;

class RobotController_electionResult_args {
 public:

  RobotController_electionResult_args(const RobotController_electionResult_args&) noexcept;
  RobotController_electionResult_args& operator=(const RobotController_electionResult_args&) noexcept;
  RobotController_electionResult_args() noexcept
                                      : id(0) {
  }

  virtual ~RobotController_electionResult_args() noexcept;
  int32_t id;

  _RobotController_electionResult_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const RobotController_electionResult_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const RobotController_electionResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotController_electionResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RobotController_electionResult_pargs {
 public:


  virtual ~RobotController_electionResult_pargs() noexcept;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RobotController_electionResult_result {
 public:

  RobotController_electionResult_result(const RobotController_electionResult_result&) noexcept;
  RobotController_electionResult_result& operator=(const RobotController_electionResult_result&) noexcept;
  RobotController_electionResult_result() noexcept {
  }

  virtual ~RobotController_electionResult_result() noexcept;

  bool operator == (const RobotController_electionResult_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RobotController_electionResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotController_electionResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RobotController_electionResult_presult {
 public:


  virtual ~RobotController_electionResult_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RobotControllerClient : virtual public RobotControllerIf {
 public:
  RobotControllerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RobotControllerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping() override;
  void send_ping();
  void recv_ping();
  void registerRobot(const int32_t id, const std::string& name) override;
  void send_registerRobot(const int32_t id, const std::string& name);
  void recv_registerRobot();
  bool checkRobotHealth(const int32_t id) override;
  void send_checkRobotHealth(const int32_t id);
  bool recv_checkRobotHealth();
  void electionResult(const int32_t id) override;
  void send_electionResult(const int32_t id);
  void recv_electionResult();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RobotControllerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<RobotControllerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (RobotControllerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerRobot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkRobotHealth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_electionResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RobotControllerProcessor(::std::shared_ptr<RobotControllerIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &RobotControllerProcessor::process_ping;
    processMap_["registerRobot"] = &RobotControllerProcessor::process_registerRobot;
    processMap_["checkRobotHealth"] = &RobotControllerProcessor::process_checkRobotHealth;
    processMap_["electionResult"] = &RobotControllerProcessor::process_electionResult;
  }

  virtual ~RobotControllerProcessor() {}
};

class RobotControllerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RobotControllerProcessorFactory(const ::std::shared_ptr< RobotControllerIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< RobotControllerIfFactory > handlerFactory_;
};

class RobotControllerMultiface : virtual public RobotControllerIf {
 public:
  RobotControllerMultiface(std::vector<std::shared_ptr<RobotControllerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RobotControllerMultiface() {}
 protected:
  std::vector<std::shared_ptr<RobotControllerIf> > ifaces_;
  RobotControllerMultiface() {}
  void add(::std::shared_ptr<RobotControllerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void registerRobot(const int32_t id, const std::string& name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerRobot(id, name);
    }
    ifaces_[i]->registerRobot(id, name);
  }

  bool checkRobotHealth(const int32_t id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkRobotHealth(id);
    }
    return ifaces_[i]->checkRobotHealth(id);
  }

  void electionResult(const int32_t id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->electionResult(id);
    }
    ifaces_[i]->electionResult(id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RobotControllerConcurrentClient : virtual public RobotControllerIf {
 public:
  RobotControllerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  RobotControllerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping() override;
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  void registerRobot(const int32_t id, const std::string& name) override;
  int32_t send_registerRobot(const int32_t id, const std::string& name);
  void recv_registerRobot(const int32_t seqid);
  bool checkRobotHealth(const int32_t id) override;
  int32_t send_checkRobotHealth(const int32_t id);
  bool recv_checkRobotHealth(const int32_t seqid);
  void electionResult(const int32_t id) override;
  int32_t send_electionResult(const int32_t id);
  void recv_electionResult(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
