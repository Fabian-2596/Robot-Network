// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_server_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_server_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_server_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_server_2eproto;
class RobotRegistration;
struct RobotRegistrationDefaultTypeInternal;
extern RobotRegistrationDefaultTypeInternal _RobotRegistration_default_instance_;
class RobotSetStatus;
struct RobotSetStatusDefaultTypeInternal;
extern RobotSetStatusDefaultTypeInternal _RobotSetStatus_default_instance_;
class RobotStatus;
struct RobotStatusDefaultTypeInternal;
extern RobotStatusDefaultTypeInternal _RobotStatus_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class RobotStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RobotStatus) */ {
 public:
  inline RobotStatus() : RobotStatus(nullptr) {}
  ~RobotStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RobotStatus(::google::protobuf::internal::ConstantInitialized);

  inline RobotStatus(const RobotStatus& from)
      : RobotStatus(nullptr, from) {}
  RobotStatus(RobotStatus&& from) noexcept
    : RobotStatus() {
    *this = ::std::move(from);
  }

  inline RobotStatus& operator=(const RobotStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotStatus& operator=(RobotStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotStatus* internal_default_instance() {
    return reinterpret_cast<const RobotStatus*>(
               &_RobotStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RobotStatus& a, RobotStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RobotStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RobotStatus& from) {
    RobotStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RobotStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RobotStatus";
  }
  protected:
  explicit RobotStatus(::google::protobuf::Arena* arena);
  RobotStatus(::google::protobuf::Arena* arena, const RobotStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsActiveFieldNumber = 1,
  };
  // bool is_active = 1;
  void clear_is_active() ;
  bool is_active() const;
  void set_is_active(bool value);

  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:RobotStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool is_active_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_2eproto;
};// -------------------------------------------------------------------

class RobotSetStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RobotSetStatus) */ {
 public:
  inline RobotSetStatus() : RobotSetStatus(nullptr) {}
  ~RobotSetStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RobotSetStatus(::google::protobuf::internal::ConstantInitialized);

  inline RobotSetStatus(const RobotSetStatus& from)
      : RobotSetStatus(nullptr, from) {}
  RobotSetStatus(RobotSetStatus&& from) noexcept
    : RobotSetStatus() {
    *this = ::std::move(from);
  }

  inline RobotSetStatus& operator=(const RobotSetStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotSetStatus& operator=(RobotSetStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotSetStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotSetStatus* internal_default_instance() {
    return reinterpret_cast<const RobotSetStatus*>(
               &_RobotSetStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RobotSetStatus& a, RobotSetStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotSetStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotSetStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotSetStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotSetStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RobotSetStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RobotSetStatus& from) {
    RobotSetStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RobotSetStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RobotSetStatus";
  }
  protected:
  explicit RobotSetStatus(::google::protobuf::Arena* arena);
  RobotSetStatus(::google::protobuf::Arena* arena, const RobotSetStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kIsActiveFieldNumber = 2,
  };
  // int32 robot_id = 1;
  void clear_robot_id() ;
  ::int32_t robot_id() const;
  void set_robot_id(::int32_t value);

  private:
  ::int32_t _internal_robot_id() const;
  void _internal_set_robot_id(::int32_t value);

  public:
  // bool is_active = 2;
  void clear_is_active() ;
  bool is_active() const;
  void set_is_active(bool value);

  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:RobotSetStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t robot_id_;
    bool is_active_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_2eproto;
};// -------------------------------------------------------------------

class RobotRegistration final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RobotRegistration) */ {
 public:
  inline RobotRegistration() : RobotRegistration(nullptr) {}
  ~RobotRegistration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RobotRegistration(::google::protobuf::internal::ConstantInitialized);

  inline RobotRegistration(const RobotRegistration& from)
      : RobotRegistration(nullptr, from) {}
  RobotRegistration(RobotRegistration&& from) noexcept
    : RobotRegistration() {
    *this = ::std::move(from);
  }

  inline RobotRegistration& operator=(const RobotRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotRegistration& operator=(RobotRegistration&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotRegistration& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotRegistration* internal_default_instance() {
    return reinterpret_cast<const RobotRegistration*>(
               &_RobotRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RobotRegistration& a, RobotRegistration& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotRegistration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotRegistration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotRegistration* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotRegistration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RobotRegistration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RobotRegistration& from) {
    RobotRegistration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RobotRegistration* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RobotRegistration";
  }
  protected:
  explicit RobotRegistration(::google::protobuf::Arena* arena);
  RobotRegistration(::google::protobuf::Arena* arena, const RobotRegistration& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotNameFieldNumber = 2,
    kRobotIdFieldNumber = 1,
  };
  // string robot_name = 2;
  void clear_robot_name() ;
  const std::string& robot_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_robot_name(Arg_&& arg, Args_... args);
  std::string* mutable_robot_name();
  PROTOBUF_NODISCARD std::string* release_robot_name();
  void set_allocated_robot_name(std::string* value);

  private:
  const std::string& _internal_robot_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_name(
      const std::string& value);
  std::string* _internal_mutable_robot_name();

  public:
  // int32 robot_id = 1;
  void clear_robot_id() ;
  ::int32_t robot_id() const;
  void set_robot_id(::int32_t value);

  private:
  ::int32_t _internal_robot_id() const;
  void _internal_set_robot_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:RobotRegistration)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      36, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr robot_name_;
    ::int32_t robot_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RobotStatus

// bool is_active = 1;
inline void RobotStatus::clear_is_active() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_active_ = false;
}
inline bool RobotStatus::is_active() const {
  // @@protoc_insertion_point(field_get:RobotStatus.is_active)
  return _internal_is_active();
}
inline void RobotStatus::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:RobotStatus.is_active)
}
inline bool RobotStatus::_internal_is_active() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_active_;
}
inline void RobotStatus::_internal_set_is_active(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_active_ = value;
}

// -------------------------------------------------------------------

// RobotRegistration

// int32 robot_id = 1;
inline void RobotRegistration::clear_robot_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.robot_id_ = 0;
}
inline ::int32_t RobotRegistration::robot_id() const {
  // @@protoc_insertion_point(field_get:RobotRegistration.robot_id)
  return _internal_robot_id();
}
inline void RobotRegistration::set_robot_id(::int32_t value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:RobotRegistration.robot_id)
}
inline ::int32_t RobotRegistration::_internal_robot_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.robot_id_;
}
inline void RobotRegistration::_internal_set_robot_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.robot_id_ = value;
}

// string robot_name = 2;
inline void RobotRegistration::clear_robot_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.robot_name_.ClearToEmpty();
}
inline const std::string& RobotRegistration::robot_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RobotRegistration.robot_name)
  return _internal_robot_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RobotRegistration::set_robot_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.robot_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RobotRegistration.robot_name)
}
inline std::string* RobotRegistration::mutable_robot_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_robot_name();
  // @@protoc_insertion_point(field_mutable:RobotRegistration.robot_name)
  return _s;
}
inline const std::string& RobotRegistration::_internal_robot_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.robot_name_.Get();
}
inline void RobotRegistration::_internal_set_robot_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.robot_name_.Set(value, GetArena());
}
inline std::string* RobotRegistration::_internal_mutable_robot_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.robot_name_.Mutable( GetArena());
}
inline std::string* RobotRegistration::release_robot_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RobotRegistration.robot_name)
  return _impl_.robot_name_.Release();
}
inline void RobotRegistration::set_allocated_robot_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.robot_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.robot_name_.IsDefault()) {
          _impl_.robot_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RobotRegistration.robot_name)
}

// -------------------------------------------------------------------

// RobotSetStatus

// int32 robot_id = 1;
inline void RobotSetStatus::clear_robot_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.robot_id_ = 0;
}
inline ::int32_t RobotSetStatus::robot_id() const {
  // @@protoc_insertion_point(field_get:RobotSetStatus.robot_id)
  return _internal_robot_id();
}
inline void RobotSetStatus::set_robot_id(::int32_t value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:RobotSetStatus.robot_id)
}
inline ::int32_t RobotSetStatus::_internal_robot_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.robot_id_;
}
inline void RobotSetStatus::_internal_set_robot_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.robot_id_ = value;
}

// bool is_active = 2;
inline void RobotSetStatus::clear_is_active() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_active_ = false;
}
inline bool RobotSetStatus::is_active() const {
  // @@protoc_insertion_point(field_get:RobotSetStatus.is_active)
  return _internal_is_active();
}
inline void RobotSetStatus::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:RobotSetStatus.is_active)
}
inline bool RobotSetStatus::_internal_is_active() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_active_;
}
inline void RobotSetStatus::_internal_set_is_active(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_active_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_server_2eproto_2epb_2eh
