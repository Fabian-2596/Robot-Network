// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server.proto

#include "server.pb.h"
#include "server.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* RobotControl_method_names[] = {
  "/RobotControl/RegisterRobot",
  "/RobotControl/GetRobotStatus",
  "/RobotControl/SetRobotStatus",
};

std::unique_ptr< RobotControl::Stub> RobotControl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RobotControl::Stub> stub(new RobotControl::Stub(channel, options));
  return stub;
}

RobotControl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterRobot_(RobotControl_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRobotStatus_(RobotControl_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRobotStatus_(RobotControl_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RobotControl::Stub::RegisterRobot(::grpc::ClientContext* context, const ::RobotRegistration& request, ::RobotStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RobotRegistration, ::RobotStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterRobot_, context, request, response);
}

void RobotControl::Stub::async::RegisterRobot(::grpc::ClientContext* context, const ::RobotRegistration* request, ::RobotStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RobotRegistration, ::RobotStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterRobot_, context, request, response, std::move(f));
}

void RobotControl::Stub::async::RegisterRobot(::grpc::ClientContext* context, const ::RobotRegistration* request, ::RobotStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterRobot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RobotStatus>* RobotControl::Stub::PrepareAsyncRegisterRobotRaw(::grpc::ClientContext* context, const ::RobotRegistration& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RobotStatus, ::RobotRegistration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterRobot_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RobotStatus>* RobotControl::Stub::AsyncRegisterRobotRaw(::grpc::ClientContext* context, const ::RobotRegistration& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterRobotRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotControl::Stub::GetRobotStatus(::grpc::ClientContext* context, const ::RobotRegistration& request, ::RobotStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RobotRegistration, ::RobotStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRobotStatus_, context, request, response);
}

void RobotControl::Stub::async::GetRobotStatus(::grpc::ClientContext* context, const ::RobotRegistration* request, ::RobotStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RobotRegistration, ::RobotStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRobotStatus_, context, request, response, std::move(f));
}

void RobotControl::Stub::async::GetRobotStatus(::grpc::ClientContext* context, const ::RobotRegistration* request, ::RobotStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRobotStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RobotStatus>* RobotControl::Stub::PrepareAsyncGetRobotStatusRaw(::grpc::ClientContext* context, const ::RobotRegistration& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RobotStatus, ::RobotRegistration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRobotStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RobotStatus>* RobotControl::Stub::AsyncGetRobotStatusRaw(::grpc::ClientContext* context, const ::RobotRegistration& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRobotStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotControl::Stub::SetRobotStatus(::grpc::ClientContext* context, const ::RobotSetStatus& request, ::RobotStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RobotSetStatus, ::RobotStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetRobotStatus_, context, request, response);
}

void RobotControl::Stub::async::SetRobotStatus(::grpc::ClientContext* context, const ::RobotSetStatus* request, ::RobotStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RobotSetStatus, ::RobotStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRobotStatus_, context, request, response, std::move(f));
}

void RobotControl::Stub::async::SetRobotStatus(::grpc::ClientContext* context, const ::RobotSetStatus* request, ::RobotStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRobotStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RobotStatus>* RobotControl::Stub::PrepareAsyncSetRobotStatusRaw(::grpc::ClientContext* context, const ::RobotSetStatus& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RobotStatus, ::RobotSetStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetRobotStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RobotStatus>* RobotControl::Stub::AsyncSetRobotStatusRaw(::grpc::ClientContext* context, const ::RobotSetStatus& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRobotStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

RobotControl::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotControl_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotControl::Service, ::RobotRegistration, ::RobotStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RobotRegistration* req,
             ::RobotStatus* resp) {
               return service->RegisterRobot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotControl_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotControl::Service, ::RobotRegistration, ::RobotStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RobotRegistration* req,
             ::RobotStatus* resp) {
               return service->GetRobotStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotControl_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotControl::Service, ::RobotSetStatus, ::RobotStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RobotSetStatus* req,
             ::RobotStatus* resp) {
               return service->SetRobotStatus(ctx, req, resp);
             }, this)));
}

RobotControl::Service::~Service() {
}

::grpc::Status RobotControl::Service::RegisterRobot(::grpc::ServerContext* context, const ::RobotRegistration* request, ::RobotStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotControl::Service::GetRobotStatus(::grpc::ServerContext* context, const ::RobotRegistration* request, ::RobotStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotControl::Service::SetRobotStatus(::grpc::ServerContext* context, const ::RobotSetStatus* request, ::RobotStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


